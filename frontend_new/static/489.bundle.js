"use strict";(self.webpackChunkvmms=self.webpackChunkvmms||[]).push([[489],{2910:(e,t,r)=>{r.d(t,{e:()=>n});var s=r(7582),i=r(421),l=r(6391),o=r(2006),a=r(4831),p=r(5607);let n=class{constructor(){this.httpClient=(0,i.inject)(l.eN),this.tokenService=(0,i.inject)(a.Br),this.globalService=(0,i.inject)(a.Uh),this.router=(0,i.inject)(p.F0)}login(e,t){return this.httpClient.post("/obtain-token/",{host:"music",username:e,password:t}).pipe((0,o.b)((e=>{this.tokenService.setToken(e?.token),this.globalService.setCurrentUser(e?.user),this.router.navigateByUrl("/")})))}logout(){return this.httpClient.get("/logout/").pipe((0,o.b)((()=>{this.tokenService.clearToken(),this.globalService.setCurrentUser({}),this.router.navigateByUrl("/auth")})))}};n=(0,s.gn)([(0,i.Injectable)({providedIn:"root"})],n)},8489:(e,t,r)=>{r.r(t),r.d(t,{PagesModule:()=>pe});var s=r(7582),i=r(421),l=r(1196),o=r(2910),a=r(2006),p=r(4831),n=r(7674);let d=class{constructor(){this.authService=(0,i.inject)(o.e),this.globalService=(0,i.inject)(p.Uh),this.navItemList=[{name:"Content pools",route:"playlists",routerLink:!0},{name:"Programs",route:"programs",routerLink:!0},{name:"Users",route:"users",routerLink:!0},{name:"Management",route:n.N.managementUrl,routerLink:!1},{name:"Import",route:n.N.importUrl,routerLink:!1}]}ngOnInit(){this.currentUser$=this.globalService.getCurrentUser().pipe((0,a.b)((e=>{"Users"===e.group&&(this.navItemList=this.navItemList.filter((e=>"Users"!==e.name)))})))}logout(){this.authService.logout().subscribe()}};d=(0,s.gn)([(0,i.Component)({selector:"app-page-layout",templateUrl:"./page-layout.component.html",styleUrls:["./page-layout.component.scss"]})],d);var c=r(5607),h=r(4890),u=r(7434),g=r(6391),m=r(9127),y=r(564),v=r(4978),f=r(7068),b=r(6515);let S=class{constructor(){this.helperService=(0,i.inject)(p.W_),this.globalService=(0,i.inject)(p.Uh),this.playlists$=new b.X([]),this.folders$=new b.X([])}getCachedPlaylists(){return this.playlists$.asObservable()}setCachedPlaylists(e){this.playlists$.next(e)}addCachedPlaylist(e){this.playlists$.next(this.helperService.sortByField([...this.playlists$.getValue(),e]))}updateCachedPlaylist(e){this.playlists$.next(this.helperService.sortByField([...this.playlists$.getValue().filter((t=>t.id!==e.id)),e]))}removeCachedPlaylist(e){this.playlists$.next(this.playlists$.getValue().filter((t=>t.id!==e)))}getCachedFolders(){return this.folders$.asObservable()}setCachedFolders(e){this.folders$.next(e)}addCachedFolder(e){this.folders$.next(this.helperService.sortByField([...this.folders$.getValue(),e]))}updateCachedFolder(e){this.folders$.next(this.helperService.sortByField([...this.folders$.getValue().filter((t=>t.id!==e.id)),e]))}removeCachedFolder(e){this.globalService.removeOpenedFolder(),this.folders$.next(this.folders$.getValue().filter((t=>t.id!==e)))}};S=(0,s.gn)([(0,i.Injectable)({providedIn:"root"})],S);let C=class{constructor(){this.httpClient=(0,i.inject)(g.eN),this.playlistCacheService=(0,i.inject)(S),this.folderService=(0,i.inject)(p.sg),this.helperService=(0,i.inject)(p.W_),this.toastrService=(0,i.inject)(f._W)}getAllPlaylists(){return this.httpClient.get("/playlist/").pipe((0,m.U)((e=>this.helperService.sortByField(e))),(0,a.b)((e=>this.playlistCacheService.setCachedPlaylists(e))))}getPlaylist(e){return this.httpClient.get(`/playlist/${e}/`)}getPlaylistDependents(e){return this.httpClient.get(`/playlist/${e}/dependents`)}getPlaylistPreview(e){return this.httpClient.post("/playlist/preview/",e).pipe((0,m.U)((e=>({...e,songs:this.helperService.sortByField(e.songs,"artist")}))))}createPlaylist(e){return this.httpClient.post("/playlist/",e).pipe((0,a.b)((e=>this.playlistCacheService.addCachedPlaylist(e))),(0,a.b)((()=>this.toastrService.success("Playlist has been created"))))}updatePlaylist(e,t){return this.httpClient.put(`/playlist/${t}/`,e).pipe((0,a.b)((e=>this.playlistCacheService.updateCachedPlaylist(e))),(0,a.b)((()=>this.toastrService.success("Playlist has been updated"))))}deletePlaylist(e){return this.httpClient.delete(`/playlist/${e}/`).pipe((0,a.b)((()=>this.playlistCacheService.removeCachedPlaylist(e))),(0,a.b)((()=>this.toastrService.success("Playlist has been deleted"))))}uploadPlaylistCover(e){return this.httpClient.post("/s3/sign-upload-request/",{file_name:e.name,file_type:e.type}).pipe((0,a.b)((t=>this.httpClient.post(t.data.url,{...t.data.fields,file:e}))),(0,m.U)((e=>e.url)))}getPlaylistsSoundsAmount(e){return this.httpClient.get(`/playlist/song-count/?ids=${e.join(",")}`)}getAllPlaylistFolders(){return this.folderService.getAllFolders("playlist").pipe((0,a.b)((e=>this.playlistCacheService.setCachedFolders(e))))}getPlaylistFolder(e){return this.folderService.getFolder("playlist",e)}createPlaylistFolder(e){return this.folderService.createFolder("playlist",e).pipe((0,a.b)((e=>this.playlistCacheService.addCachedFolder(e))),(0,a.b)((()=>this.toastrService.success("Playlist Folder has been created"))))}updatePlaylistFolder(e,t){return this.folderService.updateFolder("playlist",e,t).pipe((0,a.b)((e=>this.playlistCacheService.updateCachedFolder(e))),(0,a.b)((()=>this.toastrService.success("Playlist Folder has been updated"))))}deletePlaylistFolder(e){return this.folderService.deleteFolder("playlist",e).pipe((0,a.b)((()=>this.playlistCacheService.removeCachedFolder(e))),(0,a.b)((()=>this.toastrService.success("Playlist Folder has been deleted"))))}getPlaylistFileSystem(){return(0,y.a)([this.getAllPlaylistFolders(),this.getAllPlaylists()]).pipe((0,v.w)((()=>(0,y.a)([this.playlistCacheService.getCachedFolders(),this.playlistCacheService.getCachedPlaylists()]))),(0,m.U)((([e,t])=>[e.map((e=>({...e,folders:[],playlists:[],type:"folder"}))),t.map((e=>({...e,type:"playlist"})))])),(0,m.U)((([e,t])=>[e.map((t=>(t.parent&&e.find((e=>e.id===t.parent))?.folders.push(t),t))),t.map((t=>(t.parent&&e.find((e=>e.id===t.parent))?.playlists.push(t),t)))])),(0,m.U)((([e,t])=>({folders:e.filter((e=>!e.parent)),items:t.filter((e=>!e.parent))}))))}getFilterList(){return this.httpClient.get("/filter/data/")}getTagList(){return this.httpClient.get("/tag/")}getCategoryList(){return this.httpClient.get("/category/").pipe((0,m.U)((e=>this.helperService.sortByNumericField(e))))}getGenreList(){return this.httpClient.get("/genre/").pipe((0,m.U)((e=>e.map((e=>(e.isSelected=!1,e))))))}getCategoryStructure(){return(0,y.a)([this.getCategoryList(),this.getGenreList()]).pipe((0,m.U)((([e,t])=>e.map((e=>(e.genres=[],e.genres=this.helperService.sortByNumericField(t.filter((t=>t.category===e.id))),e))).filter((e=>e.genres?.length)))))}};C=(0,s.gn)([(0,i.Injectable)({providedIn:"root"})],C);let F=class{constructor(){this.helperService=(0,i.inject)(p.W_),this.globalService=(0,i.inject)(p.Uh),this.programs$=new b.X([]),this.folders$=new b.X([])}getCachedPrograms(){return this.programs$.asObservable()}setCachedPrograms(e){this.programs$.next(e)}addCachedProgram(e){this.programs$.next(this.helperService.sortByField([...this.programs$.getValue(),e]))}updateCachedProgram(e){this.programs$.next(this.helperService.sortByField([...this.programs$.getValue().filter((t=>t.id!==e.id)),e]))}removeCachedProgram(e){this.programs$.next(this.programs$.getValue().filter((t=>t.id!==e)))}getCachedFolders(){return this.folders$.asObservable()}setCachedFolders(e){this.folders$.next(e)}addCachedFolder(e){this.folders$.next(this.helperService.sortByField([...this.folders$.getValue(),e]))}updateCachedFolder(e){this.folders$.next(this.helperService.sortByField([...this.folders$.getValue().filter((t=>t.id!==e.id)),e]))}removeCachedFolder(e){this.globalService.removeOpenedFolder(),this.folders$.next(this.folders$.getValue().filter((t=>t.id!==e)))}};F=(0,s.gn)([(0,i.Injectable)({providedIn:"root"})],F);let I=class{constructor(){this.httpClient=(0,i.inject)(g.eN),this.programCacheService=(0,i.inject)(F),this.folderService=(0,i.inject)(p.sg),this.helperService=(0,i.inject)(p.W_),this.toastrService=(0,i.inject)(f._W)}getAllPrograms(){return this.httpClient.get("/program/").pipe((0,m.U)((e=>this.helperService.sortByField(e))),(0,a.b)((e=>this.programCacheService.setCachedPrograms(e))))}getProgram(e){return this.httpClient.get(`/program/${e}/`)}getProgramDependents(e){return this.httpClient.get(`/program/${e}/dependents`)}getProgramPreview(e){return this.httpClient.post("/program/preview/",e).pipe((0,m.U)((e=>({...e,songs:this.helperService.sortByField(e.songs,"artist")}))))}createProgram(e){return this.httpClient.post("/program/",e).pipe((0,a.b)((e=>this.programCacheService.addCachedProgram(e))),(0,a.b)((()=>this.toastrService.success("Program has been created"))))}updateProgram(e,t){return this.httpClient.put(`/program/${t}/`,e).pipe((0,a.b)((e=>this.programCacheService.updateCachedProgram(e))),(0,a.b)((()=>this.toastrService.success("Program has been updated"))))}deleteProgram(e){return this.httpClient.delete(`/program/${e}/`).pipe((0,a.b)((e=>this.programCacheService.removeCachedProgram(e))),(0,a.b)((()=>this.toastrService.success("Program has been deleted"))))}uploadProgramCover(e){return this.httpClient.post("/s3/sign-upload-request/",{file_name:e.name,file_type:e.type}).pipe((0,a.b)((t=>this.httpClient.post(t.data.url,{...t.data.fields,file:e}))),(0,m.U)((e=>e.url)))}getAllProgramFolders(){return this.folderService.getAllFolders("program").pipe((0,a.b)((e=>this.programCacheService.setCachedFolders(e))))}getProgramFolder(e){return this.folderService.getFolder("program",e)}createProgramFolder(e){return this.folderService.createFolder("program",e).pipe((0,a.b)((e=>this.programCacheService.addCachedFolder(e))),(0,a.b)((()=>this.toastrService.success("Program Folder has been created"))))}updateProgramFolder(e,t){return this.folderService.updateFolder("program",e,t).pipe((0,a.b)((e=>this.programCacheService.updateCachedFolder(e))),(0,a.b)((()=>this.toastrService.success("Program Folder has been updated"))))}deleteProgramFolder(e){return this.folderService.deleteFolder("program",e).pipe((0,a.b)((()=>this.programCacheService.removeCachedFolder(e))),(0,a.b)((()=>this.toastrService.success("Program Folder has been deleted"))))}getProgramFileSystem(){return(0,y.a)([this.getAllProgramFolders(),this.getAllPrograms()]).pipe((0,v.w)((()=>(0,y.a)([this.programCacheService.getCachedFolders(),this.programCacheService.getCachedPrograms()]))),(0,m.U)((([e,t])=>[e.map((e=>({...e,folders:[],programs:[],type:"folder"}))),t.map((e=>({...e,type:"program",playlists:e.playlists.map((e=>({...e,type:"playlist"})))})))])),(0,m.U)((([e,t])=>[e.map((t=>(t.parent&&e.find((e=>e.id===t.parent))?.folders.push(t),t))),t.map((t=>(t.parent&&e.find((e=>e.id===t.parent))?.programs.push(t),t)))])),(0,m.U)((([e,t])=>({folders:e.filter((e=>!e.parent)),items:t.filter((e=>!e.parent))}))))}};I=(0,s.gn)([(0,i.Injectable)({providedIn:"root"})],I);let P=class{constructor(){this.dialogRef=(0,i.inject)(h.so),this.formBuilder=(0,i.inject)(u.qu),this.playlistService=(0,i.inject)(C),this.programService=(0,i.inject)(I),this.data=(0,i.inject)(h.WI)}ngOnInit(){this.formGroup=this.formBuilder.group({name:["",u.kI.required]})}createFolder(){("Content Pool"===this.data.contentType?this.playlistService.createPlaylistFolder(this.formGroup.get("name")?.value):this.programService.createProgramFolder(this.formGroup.get("name")?.value)).subscribe((e=>this.dialogRef.close(e)))}};P=(0,s.gn)([(0,i.Component)({selector:"app-create-folder-dialog",templateUrl:"./create-folder-dialog.component.html",styleUrls:["./create-folder-dialog.component.scss"]})],P);var U=r(4975);let $=class{constructor(){this.dialogRef=(0,i.inject)(h.so),this.data=(0,i.inject)(h.WI)}confirm(){this.dialogRef.close(!0)}};$=(0,s.gn)([(0,i.Component)({selector:"app-confirmation-dialog",templateUrl:"./confirmation-dialog.component.html",styleUrls:["./confirmation-dialog.component.scss"]})],$);let j=class{constructor(){this.dialog=(0,i.inject)(h.uw),this.router=(0,i.inject)(c.F0),this.globalService=(0,i.inject)(p.Uh),this.contentType="Content Pool",this.itemCreation=new i.EventEmitter,this.itemDeletion=new i.EventEmitter}ngOnInit(){this.currentItem$=this.globalService.getCurrentItem()}createFolder(){this.dialog.open(P,{data:{contentType:this.contentType}}).afterClosed().subscribe((e=>{e&&this.router.navigateByUrl(`/${"Content Pool"===this.contentType?"playlists":"programs"}/folder/${e.id}`)}))}create(){this.itemCreation.emit()}delete(e){this.dialog.open($,{data:{message:`Are you sure you want to delete this ${e.category}? This action is irreversible.`}}).afterClosed().pipe((0,U.h)((e=>e)),(0,a.b)((()=>this.itemDeletion.emit(e)))).subscribe()}};(0,s.gn)([(0,i.Input)()],j.prototype,"contentType",void 0),(0,s.gn)([(0,i.Output)()],j.prototype,"itemCreation",void 0),(0,s.gn)([(0,i.Output)()],j.prototype,"itemDeletion",void 0),j=(0,s.gn)([(0,i.Component)({selector:"app-list-buttons",templateUrl:"./list-buttons.component.html",styleUrls:["./list-buttons.component.scss"]})],j);let w=class{constructor(){this.label="",this.placeholder="",this.rows=3}};(0,s.gn)([(0,i.Input)()],w.prototype,"label",void 0),(0,s.gn)([(0,i.Input)()],w.prototype,"placeholder",void 0),(0,s.gn)([(0,i.Input)()],w.prototype,"control",void 0),(0,s.gn)([(0,i.Input)()],w.prototype,"rows",void 0),w=(0,s.gn)([(0,i.Component)({selector:"app-custom-textarea-input",templateUrl:"./custom-textarea-input.component.html",styleUrls:["./custom-textarea-input.component.scss"]})],w);let B=class{constructor(){this.formBuilder=(0,i.inject)(u.qu),this.label="",this.placeholder="",this.tagStyle="default",this.optionList=[],this.excludedList=[]}ngOnInit(){this.formGroup=this.formBuilder.group({tag:[""]})}selectTag(e){const t=this.control.value,r=this.formGroup.get("tag");t.push(e?.option.value),this.control.setValue(t),r.reset()}removeTag(e){const t=this.control.value;t.splice(e,1),this.control.setValue(t)}};(0,s.gn)([(0,i.Input)()],B.prototype,"label",void 0),(0,s.gn)([(0,i.Input)()],B.prototype,"placeholder",void 0),(0,s.gn)([(0,i.Input)()],B.prototype,"tagStyle",void 0),(0,s.gn)([(0,i.Input)()],B.prototype,"control",void 0),(0,s.gn)([(0,i.Input)()],B.prototype,"optionList",void 0),(0,s.gn)([(0,i.Input)()],B.prototype,"excludedList",void 0),B=(0,s.gn)([(0,i.Component)({selector:"app-custom-tag-selector",templateUrl:"./custom-tag-selector.component.html",styleUrls:["./custom-tag-selector.component.scss"]})],B);const L={"🇩":"Dynamic","🇸":"Static","🎵":"All year","❄️":"Winter","☀️":"Summer","🎄":"Christmas"};var G=r(8515);let x=class{constructor(){this.router=(0,i.inject)(c.F0),this.globalService=(0,i.inject)(p.Uh),this.fullFileSystem=null,this.fileSystemSlice=null,this.itemCategory="playlist",this.search="",this.playlistPrefixList=L}ngOnInit(){this.currentItem$=this.globalService.getCurrentItem().pipe((0,a.b)((e=>e?this.setSelectedItem(e):null)),(0,G.d)()),this.openedFolder$=this.globalService.getOpenedFolder()}openFolder(e,t){return this.globalService.isEqual(e)?e.parent?this.globalService.setOpenedFolder({id:e.parent,type:"folder"}):this.globalService.removeOpenedFolder():this.globalService.setOpenedFolder({id:e.id,type:t})}select(e,t){this.globalService.setCurrentItem({id:e,category:t}),this.router.navigateByUrl(`${this.itemCategory}s/${t}/${e}`)}selectProgramPlaylist(e,t){this.globalService.setCurrentItem({id:t,category:"playlist"}),this.router.navigateByUrl(`programs/program/${e}/playlist/${t}`)}setSelectedItem(e){const t=[...this.fullFileSystem?.folders.map((e=>e))||[],...this.fullFileSystem?.items?.map((e=>e))||[]],r=this.findItem(t,e?.id||null,e?.category);if(r&&(r?.parent||r?.program)&&!this.globalService.getOpenedFolderValue()){const e="playlist"===r.type&&r?.program||r?.parent;this.globalService.setOpenedFolder(this.findItem(t,e))}}findItem(e,t,r){if(!e?.length)return null;const s=e?.find((e=>!(e?.id!==t&&e?.playlist!==t||r&&e?.type!==r)));return s||this.findItem(e?.map((e=>[...e?.folders||[],...e?.playlists||[],...e?.programs||[]])).filter((e=>e.length)).flat()||[],t,r)}};(0,s.gn)([(0,i.Input)()],x.prototype,"fullFileSystem",void 0),(0,s.gn)([(0,i.Input)()],x.prototype,"fileSystemSlice",void 0),(0,s.gn)([(0,i.Input)()],x.prototype,"itemCategory",void 0),(0,s.gn)([(0,i.Input)()],x.prototype,"search",void 0),x=(0,s.gn)([(0,i.Component)({selector:"app-folder-tree",templateUrl:"./folder-tree.component.html",styleUrls:["./folder-tree.component.scss"]})],x);let T=class{constructor(){this.label="",this.categoryList=[]}ngOnChanges(e){e.categoryList?.currentValue.length&&this.control.value.forEach((e=>{const t=this.categoryList.map((e=>e.genres)).flat().find((t=>t?.id===e));t&&this.toggle(!0,t)}))}toggle(e,t){t.isSelected=e,this.control.setValue(this.categoryList.map((e=>e.genres)).flat().filter((e=>e?.isSelected)))}};(0,s.gn)([(0,i.Input)()],T.prototype,"label",void 0),(0,s.gn)([(0,i.Input)()],T.prototype,"control",void 0),(0,s.gn)([(0,i.Input)()],T.prototype,"categoryList",void 0),T=(0,s.gn)([(0,i.Component)({selector:"app-custom-genre-selector",templateUrl:"./custom-genre-selector.component.html",styleUrls:["./custom-genre-selector.component.scss"]})],T);let O=class{transform(e,t,r){if(!r)return!1;if(e.id===r.id&&e.type===r.type)return!0;const s=t?.folders.find((t=>t.id===e.id));return!!this.findItem([...s?.folders||[],...s?.programs||[]],r)}findItem(e,t){if(!e?.length)return null;const r=e?.find((e=>e?.id===t?.id&&e?.type===t?.type));return r||this.findItem(e?.map((e=>[...e?.folders||[],...e?.program||[]])).filter((e=>e.length)).flat()||[],t)}};O=(0,s.gn)([(0,i.Pipe)({name:"isFolderOpened"})],O);let V=class{transform(e){return{folders:e.folders||[],items:[...e.playlists||[],...e.programs||[]]}}};V=(0,s.gn)([(0,i.Pipe)({name:"getInnerFileSystem"})],V);let _=class{constructor(){this.label="",this.palette=[{color:"#7bd148",border:"5px 0 0 0"},{color:"#5484ed",border:""},{color:"#a4bdfc",border:""},{color:"#46d6db",border:"0 5px 0 0"},{color:"#7ae7bf",border:""},{color:"#51b749",border:""},{color:"#fbd75b",border:""},{color:"#ffb878",border:""},{color:"#ff887c",border:"0 0 0 5px"},{color:"#dc2127",border:""},{color:"#dbadff",border:""},{color:"#e1e1e1",border:"0 0 5px 0"}]}selectColor(e){this.control.setValue(e)}};(0,s.gn)([(0,i.Input)()],_.prototype,"label",void 0),(0,s.gn)([(0,i.Input)()],_.prototype,"control",void 0),_=(0,s.gn)([(0,i.Component)({selector:"app-custom-color-selector",templateUrl:"./custom-color-selector.component.html",styleUrls:["./custom-color-selector.component.scss"]})],_);let A=class{constructor(){this.optionList=[],this.playlistRemoved=new i.EventEmitter}remove(){this.playlistRemoved.emit()}};(0,s.gn)([(0,i.Input)()],A.prototype,"group",void 0),(0,s.gn)([(0,i.Input)()],A.prototype,"optionList",void 0),(0,s.gn)([(0,i.Output)()],A.prototype,"playlistRemoved",void 0),A=(0,s.gn)([(0,i.Component)({selector:"app-custom-playlist-input",templateUrl:"./custom-playlist-input.component.html",styleUrls:["./custom-playlist-input.component.scss"]})],A);let D=class{constructor(){this.playlistService=(0,i.inject)(C)}transform(e){return this.playlistService.getPlaylistsSoundsAmount([e]).pipe((0,m.U)((t=>`(${t[e]})`)))}};D=(0,s.gn)([(0,i.Pipe)({name:"getPlaylistSoundsAmount"})],D);let k=class{transform(e){return e.map((e=>e.name)).join("\n")}};k=(0,s.gn)([(0,i.Pipe)({name:"getDependentsList"})],k);let M=class{constructor(){this.playlistService=(0,i.inject)(C)}transform(e){return this.playlistService.getPlaylist(e)}};M=(0,s.gn)([(0,i.Pipe)({name:"getPlaylistById"})],M);let q=class{transform(e,t=""){return{folders:e?.folders.filter((e=>this.search(e,t)))||[],items:e?.items.filter((e=>this.search(e,t)))||[]}}compare(e,t){return e?.toLowerCase().includes(t.toLowerCase())}search(e,t){return!!e&&(this.compare(e?.name,t)||e?.folders?.filter((e=>this.search(e,t)))?.length||e?.programs?.filter((e=>this.search(e,t)))?.length||e?.playlists?.filter((e=>this.search(e,t)))?.length)}};q=(0,s.gn)([(0,i.Pipe)({name:"filterFolderTree"})],q);let R=class{};R=(0,s.gn)([(0,i.NgModule)({declarations:[j,P,w,B,x,T,O,V,_,$,A,D,k,M,q],imports:[l.ez,p.hd,u.UX,l.Zd,u.u5,p.pC],exports:[j,w,B,x,T,O,_,A,k,q],providers:[{provide:h.Bq,useValue:{maxWidth:400,minWidth:400}}]})],R);let W=class{};W=(0,s.gn)([(0,i.Component)({selector:"app-dashboard",templateUrl:"./dashboard.component.html",styleUrls:["./dashboard.component.scss"]})],W);var N=r(2817);let E=class{constructor(){this.router=(0,i.inject)(c.F0),this.playlistService=(0,i.inject)(C),this.dialog=(0,i.inject)(h.uw),this.searchControl=new u.NI("")}ngOnInit(){this.currentFileSystem$=this.playlistService.getPlaylistFileSystem().pipe((0,G.d)())}createContentPool(){this.router.navigateByUrl("/playlists/playlist/new")}delete(e){this.dialog.open($,{data:{message:`Are you sure you want to delete this ${e.category}? This action is irreversible.`}}).afterClosed().pipe((0,U.h)((e=>e)),(0,v.w)((()=>"folder"===e.category?this.playlistService.deletePlaylistFolder(e.id).pipe((0,a.b)((()=>this.router.navigateByUrl("/playlists")))):"playlist"===e.category?this.playlistService.deletePlaylist(e.id).pipe((0,a.b)((()=>this.router.navigateByUrl("/playlists")))):(0,N.of)(null)))).subscribe()}};E=(0,s.gn)([(0,i.Component)({selector:"app-playlists",templateUrl:"./playlists.component.html",styleUrls:["./playlists.component.scss"]})],E);let z=class{constructor(){this.router=(0,i.inject)(c.F0),this.programService=(0,i.inject)(I),this.dialog=(0,i.inject)(h.uw),this.searchControl=new u.NI("")}ngOnInit(){this.currentFileSystem$=this.programService.getProgramFileSystem().pipe((0,G.d)())}createProgram(){this.router.navigateByUrl("/programs/program/new")}delete(e){this.dialog.open($,{data:{message:`Are you sure you want to delete this ${e.category}? This action is irreversible.`}}).afterClosed().pipe((0,U.h)((e=>e)),(0,v.w)((()=>"folder"===e.category?this.programService.deleteProgramFolder(e.id).pipe((0,a.b)((()=>this.router.navigateByUrl("/programs")))):"program"===e.category?this.programService.deleteProgram(e.id).pipe((0,a.b)((()=>this.router.navigateByUrl("/programs")))):(0,N.of)(null)))).subscribe()}};z=(0,s.gn)([(0,i.Component)({selector:"app-programs",templateUrl:"./programs.component.html",styleUrls:["./programs.component.scss"]})],z);let X=class{constructor(){this.router=(0,i.inject)(c.F0),this.userService=(0,i.inject)(p.KD),this.globalService=(0,i.inject)(p.Uh),this.dialog=(0,i.inject)(h.uw)}ngOnInit(){this.userList$=this.userService.getUserData().pipe((0,G.d)()),this.currentItem$=this.globalService.getCurrentItem()}select(e){this.globalService.setCurrentItem({id:e,category:"user"}),this.router.navigateByUrl(`users/user/${e}`)}create(){this.router.navigateByUrl("/users/user/new")}delete(e){this.dialog.open($,{data:{message:"Are you sure you want to delete this user? This action is irreversible."}}).afterClosed().pipe((0,U.h)((e=>e)),(0,v.w)((()=>this.userService.deleteUser(e.id).pipe((0,a.b)((()=>this.router.navigateByUrl("/users"))))))).subscribe()}};X=(0,s.gn)([(0,i.Component)({selector:"app-users",templateUrl:"./users.component.html",styleUrls:["./users.component.scss"],changeDetection:i.ChangeDetectionStrategy.OnPush})],X);const K=[{name:"Filters & Genres",id:0},{name:"Manual song selection",id:1}];let Z=class{constructor(){this.activatedRoute=(0,i.inject)(c.gz),this.formBuilder=(0,i.inject)(u.qu),this.globalService=(0,i.inject)(p.Uh),this.playlistService=(0,i.inject)(C),this.toastrService=(0,i.inject)(f._W),this.router=(0,i.inject)(c.F0),this.contentModeList=K,this.excludedTagList=[],this.previewIsLoading=!1}ngOnInit(){this.activatedRoute.paramMap.pipe((0,v.w)((e=>(this.playlistId=parseInt(e.get("playlistId")||""),this.playlist$=this.playlistDependents$=(0,N.of)(null),this.playlistId&&(this.playlist$=this.playlistService.getPlaylist(this.playlistId).pipe((0,G.d)()),this.playlistDependents$=this.playlistService.getPlaylistDependents(this.playlistId).pipe((0,G.d)())),this.playlist$))),(0,a.b)((e=>{this.folderList$=this.playlistService.getAllPlaylistFolders(),this.filterList$=this.playlistService.getFilterList().pipe((0,G.d)()),this.tagList$=this.playlistService.getTagList().pipe((0,G.d)()),this.categoryList$=this.playlistService.getCategoryStructure(),this.buildForm(),e?(this.globalService.setCurrentItem({id:this.playlistId,category:"playlist"}),this.updateForm(e)):this.addDefaultFilter()}))).subscribe()}ngOnDestroy(){this.formChangesSub?.unsubscribe(),this.playlistId&&this.globalService.removeCurrentItem()}uploadCover(e){this.playlistService.uploadPlaylistCover(e).pipe((0,a.b)((e=>this.formGroup.get("cover")?.setValue(e)))).subscribe()}buildForm(){this.formGroup=this.formBuilder.group({id:[{value:null,disabled:!0}],name:["",u.kI.required],color:["#7bd148",u.kI.required],cover:[null],parent:[null],contentMode:[null,u.kI.required],filters:this.formBuilder.array([]),includedTags:[[]],excludedTags:[[]],genres:[[]],songs:[[]],notes:[""]}),this.formChangesSub=this.formGroup.valueChanges.subscribe((e=>{this.excludedTagList=[...e.includedTags,...e.excludedTags]}))}updateForm(e){this.formGroup.patchValue(e),this.formGroup.get("contentMode")?.setValue(e.content_mode.toString()),this.formGroup.get("contentMode")?.disable(),e.filters.forEach((e=>this.addFilter(e.field,e.word,e.value))),this.formGroup.get("includedTags")?.setValue(e.include_tags?e.include_tags.split(",").map((e=>parseInt(e))):[]),this.formGroup.get("excludedTags")?.setValue(e.exclude_tags?e.exclude_tags.split(",").map((e=>parseInt(e))):[]),this.formGroup.get("genres")?.setValue(e.genres?e.genres.split(",").map((e=>parseInt(e))):[])}addFilter(e,t,r){const s=this.formGroup.get("filters");if(e&&t&&r){const i=s.value.find((r=>r.field===e&&r.word===t));if(i)return i.value.push(r)}return this.formGroup.get("filters").push(this.formBuilder.group({field:[e],word:[t],value:[[r]]}))}addDefaultFilter(){this.addFilter("Season","is not","4"),this.addFilter("Language","is","2")}removeFilter(e){this.formGroup.get("filters").removeAt(e)}save(){const e=this.getPlaylistDataForPayload();return this.playlistId?this.playlistService.updatePlaylist(e,this.playlistId).subscribe((e=>{this.playlist$=this.playlistService.getPlaylist(this.playlistId).pipe((0,G.d)()),this.buildForm(),this.updateForm(e)})):this.playlistService.createPlaylist(e).subscribe((e=>{this.router.navigateByUrl(`/playlists/playlist/${e.id}`)}))}discard(e){this.buildForm(),this.updateForm(e),this.toastrService.success("Changes have been discarded")}preview(e){this.previewIsLoading=!0,this.preview$=this.playlistService.getPlaylistPreview({content_mode:e.content_mode,exclude_tags:e.exclude_tags,filters:e.filters,genres:e.genres,include_tags:e.include_tags,per_page:1e4}).pipe((0,a.b)((()=>this.previewIsLoading=!1)))}getPlaylistDataForPayload(){const e=this.formGroup.get("filters")?.value?.map((e=>e.value.map((t=>({field:e.field,word:e.word,value:t}))))).flat(),t={...this.formGroup.value,content_mode:parseInt(this.formGroup.get("contentMode")?.value),filters:e,include_tags:this.formGroup.get("includedTags")?.value?.join(","),exclude_tags:this.formGroup.get("excludedTags")?.value?.join(","),genres:this.formGroup.get("genres")?.value?.map((e=>e.id)).join(",")};return delete t.contentMode,delete t.includedTags,delete t.excludedTags,t}};Z=(0,s.gn)([(0,i.Component)({selector:"app-playlist-editor",templateUrl:"./playlist-editor.component.html",styleUrls:["./playlist-editor.component.scss"]})],Z);let H=class{constructor(){this.formBuilder=(0,i.inject)(u.qu),this.activatedRoute=(0,i.inject)(c.gz),this.playlistService=(0,i.inject)(C),this.programService=(0,i.inject)(I),this.globalService=(0,i.inject)(p.Uh),this.isPlaylist=!1}ngOnInit(){(0,y.a)([this.activatedRoute.paramMap,this.activatedRoute.data]).pipe((0,m.U)((([e,t])=>{const r=parseInt(e?.get("id")||"");return this.globalService.setCurrentItem({id:r,category:"folder"}),this.isPlaylist="playlist"===t.category,r})),(0,v.w)((e=>this.isPlaylist?this.playlistService.getPlaylistFolder(e):this.programService.getProgramFolder(e)))).subscribe((e=>{this.folderList$=(this.isPlaylist?this.playlistService.getAllPlaylistFolders():this.programService.getAllProgramFolders()).pipe((0,m.U)((e=>e.map((e=>({name:e.name,id:e.id})))))),this.formGroup=this.formBuilder.group({name:["",u.kI.required],parent:[null]}),e&&(this.currentFolder=e,this.formGroup.patchValue(e))}))}ngOnDestroy(){this.globalService.removeCurrentItem()}save(){const e={id:this.currentFolder.id,name:this.formGroup.get("name")?.value,parent:"null"!==this.formGroup.get("parent")?.value?this.formGroup.get("parent")?.value:null};return this.isPlaylist?this.playlistService.updatePlaylistFolder(this.currentFolder.id,e).subscribe():this.programService.updateProgramFolder(this.currentFolder.id,e).subscribe()}};H=(0,s.gn)([(0,i.Component)({selector:"app-folder-editor",templateUrl:"./folder-editor.component.html",styleUrls:["./folder-editor.component.scss"]})],H);let J=class{};J=(0,s.gn)([(0,i.Component)({selector:"app-playlist-dashboard",templateUrl:"./playlist-dashboard.component.html",styleUrls:["./playlist-dashboard.component.scss"]})],J);let Q=class{};Q=(0,s.gn)([(0,i.Component)({selector:"app-program-dashboard",templateUrl:"./program-dashboard.component.html",styleUrls:["./program-dashboard.component.scss"]})],Q);let Y=class{constructor(){this.activatedRoute=(0,i.inject)(c.gz),this.formBuilder=(0,i.inject)(u.qu),this.globalService=(0,i.inject)(p.Uh),this.programService=(0,i.inject)(I),this.playlistService=(0,i.inject)(C),this.toastrService=(0,i.inject)(f._W),this.router=(0,i.inject)(c.F0),this.previewIsLoading=!1}ngOnInit(){this.activatedRoute.paramMap.pipe((0,v.w)((e=>(this.programId=parseInt(e.get("programId")||""),this.program$=this.programDependents$=(0,N.of)(null),this.programId&&(this.program$=this.programService.getProgram(this.programId).pipe((0,G.d)()),this.programDependents$=this.programService.getProgramDependents(this.programId).pipe((0,G.d)())),this.program$))),(0,a.b)((e=>{this.buildForm(),this.folderList$=this.programService.getAllProgramFolders(),this.playlistList$=this.playlistService.getAllPlaylists().pipe((0,m.U)((e=>e.map((e=>({id:e.id,name:e.name}))))),(0,G.d)()),e&&(this.globalService.setCurrentItem({id:this.programId,category:"program"}),this.updateForm(e))}))).subscribe()}ngOnDestroy(){this.formChangesSub?.unsubscribe(),this.programId&&this.globalService.removeCurrentItem()}uploadCover(e){this.programService.uploadProgramCover(e).pipe((0,a.b)((e=>this.formGroup.get("cover")?.setValue(e)))).subscribe()}buildForm(){this.formGroup=this.formBuilder.group({id:[{value:null,disabled:!0}],name:["",u.kI.required],color:["#7bd148",u.kI.required],cover:[null],parent:[null],playlists:this.formBuilder.array([]),notes:[""]})}updateForm(e){this.formGroup.patchValue(e),this.playlistList$.pipe((0,a.b)((t=>{e.playlists.forEach((e=>{const r=t.find((t=>t.id===e.playlist));r&&this.addPlaylist({id:r.id,name:r.name},e.percentage)}))}))).subscribe()}addPlaylist(e=null,t=null){return this.formGroup.get("playlists").push(this.formBuilder.group({playlist:e,percentage:t}))}removePlaylist(e){this.formGroup.get("playlists").removeAt(e)}save(){const e=this.getProgramDataForPayload();return this.programId?this.programService.updateProgram(e,this.programId).subscribe((e=>{this.program$=this.programService.getProgram(this.programId).pipe((0,G.d)()),this.buildForm(),this.updateForm(e)})):this.programService.createProgram(e).subscribe((e=>{this.router.navigateByUrl(`/programs/program/${e.id}`)}))}discard(e){this.buildForm(),this.updateForm(e),this.toastrService.success("Changes have been discarded")}preview(){this.previewIsLoading=!0,this.preview$=this.programService.getProgramPreview({playlistIds:this.formGroup.get("playlists").value.map((e=>e.playlist)),per_page:1e4}).pipe((0,a.b)((()=>this.previewIsLoading=!1)))}getProgramDataForPayload(){return{...this.formGroup.value,playlists:this.formGroup.get("playlists").value.map((e=>({playlist:e?.playlist?.id,percentage:e?.percentage})))}}};Y=(0,s.gn)([(0,i.Component)({selector:"app-program-editor",templateUrl:"./program-editor.component.html",styleUrls:["./program-editor.component.scss"]})],Y);let ee=class{};ee=(0,s.gn)([(0,i.Component)({selector:"app-user-dashboard",templateUrl:"./user-dashboard.component.html",styleUrls:["./user-dashboard.component.scss"]})],ee);const te=[{id:"Superuser",name:"Superuser"},{id:"Admin",name:"Admin"},{id:"User",name:"User"}];let re=class{constructor(){this.activatedRoute=(0,i.inject)(c.gz),this.formBuilder=(0,i.inject)(u.qu),this.globalService=(0,i.inject)(p.Uh),this.userService=(0,i.inject)(p.KD),this.toastrService=(0,i.inject)(f._W),this.router=(0,i.inject)(c.F0),this.userGroupList=te}ngOnInit(){this.activatedRoute.paramMap.pipe((0,v.w)((e=>(this.userId=parseInt(e.get("id")||""),this.user$=this.userId?this.userService.getUser(this.userId).pipe((0,G.d)()):(0,N.of)(null)))),(0,a.b)((e=>{this.buildForm(),e&&(this.globalService.setCurrentItem({id:this.userId,category:"user"}),this.updateForm(e))}))).subscribe()}ngOnDestroy(){this.userId&&this.globalService.removeCurrentItem()}buildForm(){this.formGroup=this.formBuilder.group({id:[{value:null,disabled:!0}],username:["",u.kI.required],password:[""],group:[null,u.kI.required]}),this.userId||this.formGroup.get("password")?.setValidators(u.kI.required)}updateForm(e){this.formGroup.patchValue(e)}save(){if(this.userId){const e={...this.formGroup.value};return e.password||delete e.password,this.userService.updateUser(e,this.userId).subscribe()}return this.userService.createUser(this.formGroup.value).pipe((0,a.b)((e=>this.router.navigateByUrl(`/users/user/${e.id}`)))).subscribe()}discard(e){this.buildForm(),this.updateForm(e),this.toastrService.success("Changes have been discarded")}};re=(0,s.gn)([(0,i.Component)({selector:"app-user-editor",templateUrl:"./user-editor.component.html",styleUrls:["./user-editor.component.scss"]})],re);const se=[{path:"",component:d,children:[{path:"",pathMatch:"full",redirectTo:"dashboard"},{path:"dashboard",component:W},{path:"playlists",component:E,children:[{path:"",pathMatch:"full",redirectTo:"dashboard"},{path:"dashboard",component:J},{path:"playlist",pathMatch:"full",redirectTo:"dashboard"},{path:"folder",pathMatch:"full",redirectTo:"dashboard"},{path:"folder/:id",component:H,data:{category:"playlist"}},{path:"playlist/new",component:Z},{path:"playlist/:playlistId",component:Z}]},{path:"programs",component:z,children:[{path:"",pathMatch:"full",redirectTo:"dashboard"},{path:"dashboard",component:Q},{path:"program",pathMatch:"full",redirectTo:"dashboard"},{path:"folder",pathMatch:"full",redirectTo:"dashboard"},{path:"folder/:id",component:H,data:{category:"program"}},{path:"program/new",component:Y},{path:"program/:programId",component:Y},{path:"program/:programId/playlist",pathMatch:"full",redirectTo:"program/:programId"},{path:"program/:programId/playlist/:playlistId",component:Z}]},{path:"users",component:X,children:[{path:"",pathMatch:"full",redirectTo:"dashboard"},{path:"dashboard",component:ee},{path:"user",pathMatch:"full",redirectTo:"dashboard"},{path:"user/new",component:re},{path:"user/:id",component:re}]},{path:"**",redirectTo:"dashboard"}]}];let ie=class{};ie=(0,s.gn)([(0,i.NgModule)({declarations:[],imports:[l.ez,c.Bz.forChild(se)],exports:[c.Bz]})],ie);var le=r(5307),oe=r(6974);let ae=class{constructor(){this.previewSongs=[],this.displayedColumns=["artist","artist-add","title","title-add","tags","last-updated-by","edit"]}ngAfterViewInit(){this.dataSource=new oe.by(this.previewSongs),this.dataSource.paginator=this.paginator}navigateTo(e){window.location.href=`${n.N.importUrl}/songs/${e}/edit`}};(0,s.gn)([(0,i.ViewChild)(le.NW)],ae.prototype,"paginator",void 0),(0,s.gn)([(0,i.Input)()],ae.prototype,"previewSongs",void 0),ae=(0,s.gn)([(0,i.Component)({selector:"app-songs-preview",templateUrl:"./songs-preview.component.html",styleUrls:["./songs-preview.component.scss"]})],ae);let pe=class{};pe=(0,s.gn)([(0,i.NgModule)({declarations:[d,W,E,z,X,Z,H,J,Q,Y,ee,re,ae],imports:[l.ez,c.lC,R,c.Od,c.rH,ie,p.hd,l.Zd,u.UX,p.pC]})],pe)}}]);